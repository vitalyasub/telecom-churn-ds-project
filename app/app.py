import streamlit as st
import pandas as pd
import numpy as np
import joblib
from utils.preprocessing import prepare_input_data
from PIL import Image
import matplotlib.pyplot as plt

# ============ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ ============
st.set_page_config(
    page_title="–ü—Ä–æ–≥–Ω–æ–∑ –í—ñ–¥—Ç–æ–∫—É –ö–ª—ñ—î–Ω—Ç—ñ–≤",
    page_icon="üìâ",
    layout="centered",
)

# ============ –õ–æ–≥–æ—Ç–∏–ø ============
try:
    logo = Image.open("app/assets/logo.png")
    st.image(logo, width=150)
except:
    st.title("üìä –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –í—ñ–¥—Ç–æ–∫—É –ö–ª—ñ—î–Ω—Ç—ñ–≤")

st.markdown("### üë• –ê–Ω–∞–ª—ñ—Ç–∏—á–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –ø–æ–≤–µ–¥—ñ–Ω–∫–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤ —Ç–µ–ª–µ–∫–æ–º-–∫–æ–º–ø–∞–Ω—ñ—ó")
st.divider()

# ============ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ ============
@st.cache_resource
def load_model():
    model = joblib.load("models/best_model.pkl")
    scaler = joblib.load("models/scaler.pkl")
    return model, scaler

try:
    model, scaler = load_model()
except:
    st.warning("‚ö†Ô∏è –ú–æ–¥–µ–ª—å –∞–±–æ scaler –ø–æ–∫–∏ —â–æ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–µ–º–æ-—Ä–µ–∂–∏–º.")
    model, scaler = None, None

# ============ –í–≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏—Ö –¥–∞–Ω–∏—Ö ============
st.header("üîß –í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞:")

col1, col2 = st.columns(2)

with col1:
    is_tv_subscriber = st.selectbox("–ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –¢–ë", ["–¢–∞–∫", "–ù—ñ"])
    is_movie_package_subscriber = st.selectbox("–ü–∞–∫–µ—Ç —Ñ—ñ–ª—å–º—ñ–≤", ["–¢–∞–∫", "–ù—ñ"])
    subscription_age = st.number_input("–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –ø—ñ–¥–ø–∏—Å–∫–∏ (—Ä–æ–∫—ñ–≤)", min_value=0.0, max_value=20.0, value=2.0, step=0.1)
    bill_avg = st.number_input("–°–µ—Ä–µ–¥–Ω—ñ–π —Ä–∞—Ö—É–Ω–æ–∫ ($)", min_value=0.0, max_value=500.0, value=25.0, step=1.0)

with col2:
    reamining_contract = st.number_input("–ó–∞–ª–∏—à–æ–∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É (—Ä–æ–∫—ñ–≤)", min_value=0.0, max_value=10.0, value=1.0, step=0.1)
    service_failure_count = st.number_input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–±–æ—ó–≤ —Å–µ—Ä–≤—ñ—Å—É", min_value=0, max_value=20, value=0)
    download_avg = st.number_input("–°–µ—Ä–µ–¥–Ω—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (GB)", min_value=0.0, max_value=5000.0, value=50.0)
    upload_avg = st.number_input("–°–µ—Ä–µ–¥–Ω—î –≤—ñ–¥–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (GB)", min_value=0.0, max_value=500.0, value=5.0)
    download_over_limit = st.selectbox("–ü–µ—Ä–µ–≤–∏—â–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è", ["–¢–∞–∫", "–ù—ñ"])

st.divider()

# ============ –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö ============
input_data = prepare_input_data(
    is_tv_subscriber,
    is_movie_package_subscriber,
    subscription_age,
    bill_avg,
    reamining_contract,
    service_failure_count,
    download_avg,
    upload_avg,
    download_over_limit
)

# ============ –ü—Ä–æ–≥–Ω–æ–∑ ============
if st.button("üîÆ –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞—Ç–∏"):
    if model is None:
        st.error("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞. –î–æ–¥–∞–π—Ç–µ 'best_model.pkl' —ñ 'scaler.pkl' —É –ø–∞–ø–∫—É models/")
    else:
        X_scaled = scaler.transform(input_data)
        prediction = model.predict(X_scaled)[0]
        probability = model.predict_proba(X_scaled)[0][1]

        st.subheader("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≥–Ω–æ–∑—É:")
        if prediction == 1:
            st.error(f"–ö–ª—ñ—î–Ω—Ç **–π–º–æ–≤—ñ—Ä–Ω–æ –ø—ñ–¥–µ** üòî (–π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –≤—ñ–¥—Ç–æ–∫—É: {probability:.2%})")
        else:
            st.success(f"–ö–ª—ñ—î–Ω—Ç **–π–º–æ–≤—ñ—Ä–Ω–æ –∑–∞–ª–∏—à–∏—Ç—å—Å—è** üòä (–π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –≤—ñ–¥—Ç–æ–∫—É: {probability:.2%})")

        # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è
        fig, ax = plt.subplots(figsize=(4,3))
        ax.bar(["–ó–∞–ª–∏—à–∏—Ç—å—Å—è", "–í—ñ–¥—Ç—ñ–∫"], [1 - probability, probability], color=["green", "red"])
        ax.set_ylim(0, 1)
        ax.set_ylabel("–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å")
        st.pyplot(fig)

st.caption("¬© 2025 –ê–Ω–∞–ª—ñ—Ç–∏—á–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –∑ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –≤—ñ–¥—Ç–æ–∫—É –∫–ª—ñ—î–Ω—Ç—ñ–≤ üì°")