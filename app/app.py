# import streamlit as st
# import pandas as pd
# import numpy as np
# import joblib
# from utils.preprocessing import prepare_input_data
# from PIL import Image
# import matplotlib.pyplot as plt

# # ============ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ ============
# st.set_page_config(
#     page_title="–ü—Ä–æ–≥–Ω–æ–∑ –í—ñ–¥—Ç–æ–∫—É –ö–ª—ñ—î–Ω—Ç—ñ–≤",
#     page_icon="üìâ",
#     layout="centered",
# )

# # ============ –õ–æ–≥–æ—Ç–∏–ø ============
# try:
#     logo = Image.open("app/assets/logo.png")
#     st.image(logo, width=150)
# except:
#     st.title("üìä –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –í—ñ–¥—Ç–æ–∫—É –ö–ª—ñ—î–Ω—Ç—ñ–≤")

# st.markdown("### üë• –ê–Ω–∞–ª—ñ—Ç–∏—á–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –ø–æ–≤–µ–¥—ñ–Ω–∫–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤ —Ç–µ–ª–µ–∫–æ–º-–∫–æ–º–ø–∞–Ω—ñ—ó")
# st.divider()

# # ============ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ ============
# @st.cache_resource
# def load_model():
#     model = joblib.load("models/best_model.pkl")
#     scaler = joblib.load("models/scaler.pkl")
#     return model, scaler

# try:
#     model, scaler = load_model()
# except:
#     st.warning("‚ö†Ô∏è –ú–æ–¥–µ–ª—å –∞–±–æ scaler –ø–æ–∫–∏ —â–æ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–µ–º–æ-—Ä–µ–∂–∏–º.")
#     model, scaler = None, None

# # ============ –í–≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏—Ö –¥–∞–Ω–∏—Ö ============
# st.header("üîß –í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞:")

# col1, col2 = st.columns(2)

# with col1:
#     is_tv_subscriber = st.selectbox("–ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –¢–ë", ["–¢–∞–∫", "–ù—ñ"])
#     is_movie_package_subscriber = st.selectbox("–ü–∞–∫–µ—Ç —Ñ—ñ–ª—å–º—ñ–≤", ["–¢–∞–∫", "–ù—ñ"])
#     subscription_age = st.number_input("–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –ø—ñ–¥–ø–∏—Å–∫–∏ (—Ä–æ–∫—ñ–≤)", min_value=0.0, max_value=20.0, value=2.0, step=0.1)
#     bill_avg = st.number_input("–°–µ—Ä–µ–¥–Ω—ñ–π —Ä–∞—Ö—É–Ω–æ–∫ ($)", min_value=0.0, max_value=500.0, value=25.0, step=1.0)

# with col2:
#     reamining_contract = st.number_input("–ó–∞–ª–∏—à–æ–∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É (—Ä–æ–∫—ñ–≤)", min_value=0.0, max_value=10.0, value=1.0, step=0.1)
#     service_failure_count = st.number_input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–±–æ—ó–≤ —Å–µ—Ä–≤—ñ—Å—É", min_value=0, max_value=20, value=0)
#     download_avg = st.number_input("–°–µ—Ä–µ–¥–Ω—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (GB)", min_value=0.0, max_value=5000.0, value=50.0)
#     upload_avg = st.number_input("–°–µ—Ä–µ–¥–Ω—î –≤—ñ–¥–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (GB)", min_value=0.0, max_value=500.0, value=5.0)
#     download_over_limit = st.selectbox("–ü–µ—Ä–µ–≤–∏—â–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è", ["–¢–∞–∫", "–ù—ñ"])

# st.divider()

# # ============ –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–∏—Ö ============
# input_data = prepare_input_data(
#     is_tv_subscriber,
#     is_movie_package_subscriber,
#     subscription_age,
#     bill_avg,
#     reamining_contract,
#     service_failure_count,
#     download_avg,
#     upload_avg,
#     download_over_limit
# )

# # ============ –ü—Ä–æ–≥–Ω–æ–∑ ============
# if st.button("üîÆ –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞—Ç–∏"):
#     if model is None:
#         st.error("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞. –î–æ–¥–∞–π—Ç–µ 'best_model.pkl' —ñ 'scaler.pkl' —É –ø–∞–ø–∫—É models/")
#     else:
#         X_scaled = scaler.transform(input_data)
#         prediction = model.predict(X_scaled)[0]
#         probability = model.predict_proba(X_scaled)[0][1]

#         st.subheader("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≥–Ω–æ–∑—É:")
#         if prediction == 1:
#             st.error(f"–ö–ª—ñ—î–Ω—Ç **–π–º–æ–≤—ñ—Ä–Ω–æ –ø—ñ–¥–µ** üòî (–π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –≤—ñ–¥—Ç–æ–∫—É: {probability:.2%})")
#         else:
#             st.success(f"–ö–ª—ñ—î–Ω—Ç **–π–º–æ–≤—ñ—Ä–Ω–æ –∑–∞–ª–∏—à–∏—Ç—å—Å—è** üòä (–π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –≤—ñ–¥—Ç–æ–∫—É: {probability:.2%})")

#         # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è
#         fig, ax = plt.subplots(figsize=(4,3))
#         ax.bar(["–ó–∞–ª–∏—à–∏—Ç—å—Å—è", "–í—ñ–¥—Ç—ñ–∫"], [1 - probability, probability], color=["green", "red"])
#         ax.set_ylim(0, 1)
#         ax.set_ylabel("–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å")
#         st.pyplot(fig)

# st.caption("¬© 2025 –ê–Ω–∞–ª—ñ—Ç–∏—á–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –∑ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –≤—ñ–¥—Ç–æ–∫—É –∫–ª—ñ—î–Ω—Ç—ñ–≤ üì°")


import streamlit as st
import pandas as pd
import numpy as np
import joblib
from PIL import Image
import matplotlib.pyplot as plt
import os
import io
import time  # –î–æ–¥–∞—î–º–æ –¥–ª—è —ñ–º—ñ—Ç–∞—Ü—ñ—ó —Ä–æ–±–æ—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑—É


# ==============================================================================
# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö (–¥–ª—è –ø–µ—Ä—à–æ—ó –≤–∫–ª–∞–¥–∫–∏)
# ==============================================================================
def prepare_input_data(
    is_tv_subscriber,
    is_movie_package_subscriber,
    subscription_age,
    bill_avg,
    reamining_contract,
    service_failure_count,
    download_avg,
    upload_avg,
    download_over_limit,
):
    """
    –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î –≤–≤–µ–¥–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –¥–∞–Ω—ñ —É —Ñ–æ—Ä–º–∞—Ç DataFrame, –≥–æ—Ç–æ–≤–∏–π
    –¥–ª—è –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è —Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è.
    """
    data = {
        "is_tv_subscriber": 1 if is_tv_subscriber == "–¢–∞–∫" else 0,
        "is_movie_package_subscriber": 1 if is_movie_package_subscriber == "–¢–∞–∫" else 0,
        "subscription_age": subscription_age,
        "bill_avg": bill_avg,
        "reamining_contract": reamining_contract,
        "service_failure_count": service_failure_count,
        "download_avg": download_avg,
        "upload_avg": upload_avg,
        "download_over_limit": 1 if download_over_limit == "–¢–∞–∫" else 0,
    }
    input_df = pd.DataFrame([data])
    return input_df


# ==============================================================================
# –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –¢–ê –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –†–ï–°–£–†–°–Ü–í
# ==============================================================================

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
st.set_page_config(
    page_title="–ü—Ä–æ–≥–Ω–æ–∑ –í—ñ–¥—Ç–æ–∫—É –ö–ª—ñ—î–Ω—Ç—ñ–≤",
    page_icon="üìâ",
    layout="wide",
)


# ============ –ó–ê–ì–õ–£–®–ö–ê –î–õ–Ø –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –ú–û–î–ï–õ–Ü ============
@st.cache_resource
def load_model():
    """
    –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∑–±–µ—Ä–µ–∂–µ–Ω—É –º–æ–¥–µ–ª—å —Ç–∞ —Å–∫–µ–π–ª–µ—Ä.
    !!! –ó–ê–ì–õ–£–®–ö–ê: –î–ª—è –∑–∞–ø—É—Å–∫—É –±–µ–∑ —Ñ–∞–π–ª—ñ–≤ –º–æ–¥–µ–ª—å —Ç–∞ —Å–∫–µ–π–ª–µ—Ä –≤—Å—Ç–∞–Ω–æ–≤–ª—é—é—Ç—å—Å—è –≤ None.
    """
    model_path = "models/best_model.pkl"
    scaler_path = "models/scaler.pkl"
    model, scaler = None, None

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ñ–∞–π–ª—ñ–≤
    if os.path.exists(model_path) and os.path.exists(scaler_path):
        try:
            model = joblib.load(model_path)
            scaler = joblib.load(scaler_path)
            st.success("‚úÖ –ú–æ–¥–µ–ª—å —Ç–∞ —Å–∫–µ–π–ª–µ—Ä —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ.")
        except Exception as e:
            st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –º–æ–¥–µ–ª—ñ/—Å–∫–µ–π–ª–µ—Ä–∞: {e}")
            st.info(
                "üí° **–ü–†–ò–ú–Ü–¢–ö–ê:** –ú–æ–¥–µ–ª—å —Ç–∞ —Å–∫–µ–π–ª–µ—Ä –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ, –¥–æ–¥–∞—Ç–æ–∫ –ø—Ä–∞—Ü—é—î –≤ –î–ï–ú–û-—Ä–µ–∂–∏–º—ñ."
            )
    else:
        st.warning(f"‚ö†Ô∏è –ú–æ–¥–µ–ª—å ({model_path}) –∞–±–æ —Å–∫–µ–π–ª–µ—Ä ({scaler_path}) –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.")
        st.info(
            "üí° **–ü–†–ò–ú–Ü–¢–ö–ê:** –î–æ–¥–∞—Ç–æ–∫ –ø—Ä–∞—Ü—é—î –≤ **–î–ï–ú–û-—Ä–µ–∂–∏–º—ñ** –∑ —ñ–º—ñ—Ç–æ–≤–∞–Ω–∏–º–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏."
        )

    return model, scaler


model, scaler = load_model()

# ==============================================================================
# –§–£–ù–ö–¶–Ü–á –î–õ–Ø –í–ö–õ–ê–î–û–ö (–†–û–ó–î–Ü–õ–Ü–í)
# ==============================================================================


def manual_input_page(model, scaler):
    """
    –†–µ–∞–ª—ñ–∑—É—î —Å—Ç–æ—Ä—ñ–Ω–∫—É —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥—É –¥–∞–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç–∞ —Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è.
    """
    # ============ –ó–ê–ì–õ–£–®–ö–ê –î–õ–Ø –õ–û–ì–û–¢–ò–ü–£ ============
    try:
        logo = Image.open("app/assets/logo.png")
        st.image(logo, width=150)
    except FileNotFoundError:
        # –Ø–∫—â–æ –ª–æ–≥–æ—Ç–∏–ø—É –Ω–µ–º–∞—î, –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Ç–µ–∫—Å—Ç
        st.markdown(f"## üìä –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –í—ñ–¥—Ç–æ–∫—É –ö–ª—ñ—î–Ω—Ç—ñ–≤")
        st.caption("*(üí° –ú—ñ—Å—Ü–µ –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø—É: app/assets/logo.png)*")

    st.markdown(
        "### üë• –ê–Ω–∞–ª—ñ—Ç–∏—á–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –ø–æ–≤–µ–¥—ñ–Ω–∫–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤ —Ç–µ–ª–µ–∫–æ–º-–∫–æ–º–ø–∞–Ω—ñ—ó"
    )
    st.divider()

    # –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è, —è–∫—â–æ –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞
    if model is None:
        st.info(
            "‚≠ê **–î–ï–ú–û-–†–ï–ñ–ò–ú:** –ü—Ä–æ–≥–Ω–æ–∑–∏ –±—É–¥—É—Ç—å –≤–∏–ø–∞–¥–∫–æ–≤–∏–º–∏, –æ—Å–∫—ñ–ª—å–∫–∏ –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞."
        )

    # ============ –í–≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏—Ö –¥–∞–Ω–∏—Ö ============
    st.header("üîß –í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞:")

    # ... (—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–≤–æ–¥—É –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω) ...
    col1, col2 = st.columns(2)

    with col1:
        is_tv_subscriber = st.selectbox("–ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –¢–ë", ["–¢–∞–∫", "–ù—ñ"], key="tv_sub")
        is_movie_package_subscriber = st.selectbox(
            "–ü–∞–∫–µ—Ç —Ñ—ñ–ª—å–º—ñ–≤", ["–¢–∞–∫", "–ù—ñ"], key="movie_sub"
        )
        subscription_age = st.number_input(
            "–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –ø—ñ–¥–ø–∏—Å–∫–∏ (—Ä–æ–∫—ñ–≤)",
            min_value=0.0,
            max_value=20.0,
            value=2.0,
            step=0.1,
            key="sub_age",
        )
        bill_avg = st.number_input(
            "–°–µ—Ä–µ–¥–Ω—ñ–π —Ä–∞—Ö—É–Ω–æ–∫ ($)",
            min_value=0.0,
            max_value=500.0,
            value=25.0,
            step=1.0,
            key="bill_avg",
        )

    with col2:
        reamining_contract = st.number_input(
            "–ó–∞–ª–∏—à–æ–∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É (—Ä–æ–∫—ñ–≤)",
            min_value=0.0,
            max_value=10.0,
            value=1.0,
            step=0.1,
            key="contract",
        )
        service_failure_count = st.number_input(
            "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–±–æ—ó–≤ —Å–µ—Ä–≤—ñ—Å—É",
            min_value=0,
            max_value=20,
            value=0,
            key="failure_count",
        )
        download_avg = st.number_input(
            "–°–µ—Ä–µ–¥–Ω—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (GB)",
            min_value=0.0,
            max_value=5000.0,
            value=50.0,
            key="download_avg",
        )
        upload_avg = st.number_input(
            "–°–µ—Ä–µ–¥–Ω—î –≤—ñ–¥–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (GB)",
            min_value=0.0,
            max_value=500.0,
            value=5.0,
            key="upload_avg",
        )
        download_over_limit = st.selectbox(
            "–ü–µ—Ä–µ–≤–∏—â–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è", ["–¢–∞–∫", "–ù—ñ"], key="over_limit"
        )

    st.divider()

    # ============ –ü—Ä–æ–≥–Ω–æ–∑ ============
    if st.button("üîÆ –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞—Ç–∏"):
        # –Ü–º—ñ—Ç–∞—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        with st.spinner("–ü—Ä–æ–≤–æ–¥–∏–º–æ –∞–Ω–∞–ª—ñ–∑ –¥–∞–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç–∞..."):
            time.sleep(1.5)  # –Ü–º—ñ—Ç–∞—Ü—ñ—è —á–∞—Å—É –æ–±—Ä–æ–±–∫–∏

        if model is None:
            # === –î–ï–ú–û-–õ–û–ì–Ü–ö–ê –ü–†–û–ì–ù–û–ó–£–í–ê–ù–ù–Ø ===
            # –ó—Ä–æ–±–∏–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π –ø—Ä–æ–≥–Ω–æ–∑, –∞–ª–µ –∑ —É—Ö–∏–ª–æ–º –¥–æ "–∑–∞–ª–∏—à–∏—Ç—å—Å—è"
            is_churn = np.random.choice([0, 1], p=[0.7, 0.3])
            probability = (
                np.random.uniform(0.1, 0.4)
                if is_churn == 0
                else np.random.uniform(0.6, 0.9)
            )
            prediction = is_churn
            # =================================

        else:
            # === –†–ï–ê–õ–¨–ù–ê –õ–û–ì–Ü–ö–ê –ü–†–û–ì–ù–û–ó–£–í–ê–ù–ù–Ø ===
            try:
                input_data = prepare_input_data(
                    is_tv_subscriber,
                    is_movie_package_subscriber,
                    subscription_age,
                    bill_avg,
                    reamining_contract,
                    service_failure_count,
                    download_avg,
                    upload_avg,
                    download_over_limit,
                )
                X_scaled = scaler.transform(input_data)
                prediction = model.predict(X_scaled)[0]
                probability = model.predict_proba(X_scaled)[0][1]
            except Exception as e:
                st.error(
                    f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—ñ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö: {e}"
                )
                return
            # ====================================

        st.subheader("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≥–Ω–æ–∑—É:")
        if prediction == 1:
            st.error(
                f"–ö–ª—ñ—î–Ω—Ç **–π–º–æ–≤—ñ—Ä–Ω–æ –ø—ñ–¥–µ** üòî (–π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –≤—ñ–¥—Ç–æ–∫—É: **{probability:.2%}**)"
            )
        else:
            st.success(
                f"–ö–ª—ñ—î–Ω—Ç **–π–º–æ–≤—ñ—Ä–Ω–æ –∑–∞–ª–∏—à–∏—Ç—å—Å—è** üòä (–π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –≤—ñ–¥—Ç–æ–∫—É: **{probability:.2%}**)"
            )

        # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è
        fig, ax = plt.subplots(figsize=(4, 3))
        ax.bar(
            ["–ó–∞–ª–∏—à–∏—Ç—å—Å—è", "–í—ñ–¥—Ç—ñ–∫"],
            [1 - probability, probability],
            color=["#28a745", "#dc3545"],
        )
        ax.set_ylim(0, 1)
        ax.set_ylabel("–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å")
        ax.set_title("–ô–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç—ñ")
        st.pyplot(fig)


def file_upload_page(model, scaler):
    """
    –†–µ–∞–ª—ñ–∑—É—î —Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è CSV —Ñ–∞–π–ª—É –∑ –¥–∞–Ω–∏–º–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤.
    """
    st.header("üì§ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –§–∞–π–ª—É –¥–ª—è –ü–∞–∫–µ—Ç–Ω–æ–≥–æ –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è")
    st.info("–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ **CSV** —Ñ–∞–π–ª.")
    st.divider()

    uploaded_file = st.file_uploader("–û–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª CSV", type="csv")

    if uploaded_file is not None:
        try:
            data = pd.read_csv(uploaded_file)
            st.subheader("–ü–µ—Ä–µ–≥–ª—è–¥ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö:")
            st.dataframe(data.head())

            if st.button("üöÄ –ó—Ä–æ–±–∏—Ç–∏ –ü–∞–∫–µ—Ç–Ω–∏–π –ü—Ä–æ–≥–Ω–æ–∑"):
                with st.spinner("–û–±—Ä–æ–±–∫–∞ —Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —É —Ñ–∞–π–ª—ñ..."):
                    time.sleep(2)  # –Ü–º—ñ—Ç–∞—Ü—ñ—è —á–∞—Å—É –æ–±—Ä–æ–±–∫–∏

                if model is None or scaler is None:
                    # === –î–ï–ú–û-–õ–û–ì–Ü–ö–ê –ü–ê–ö–ï–¢–ù–û–ì–û –ü–†–û–ì–ù–û–ó–£–í–ê–ù–ù–Ø ===
                    st.warning("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞. –í–∏–∫–æ–Ω—É—î—Ç—å—Å—è –î–ï–ú–û-–ø—Ä–æ–≥–Ω–æ–∑.")
                    data["Prediction"] = np.random.randint(0, 2, size=len(data))
                    data["Churn_Probability"] = np.random.uniform(
                        0.05, 0.95, size=len(data)
                    )
                    # ==========================================
                else:
                    # === –†–ï–ê–õ–¨–ù–ê –õ–û–ì–Ü–ö–ê –ü–ê–ö–ï–¢–ù–û–ì–û –ü–†–û–ì–ù–û–ó–£–í–ê–ù–ù–Ø ===
                    try:
                        data_to_predict = data.copy()
                        # !!! –í–°–¢–ê–í–¢–ï –§–£–ù–ö–¶–Ü–Æ –ü–ï–†–ï–î–û–ë–†–û–ë–ö–ò –¢–£–¢ !!!
                        # data_processed = your_preprocessing_function(data_to_predict)

                        X_scaled = scaler.transform(data_to_predict)
                        predictions = model.predict(X_scaled)
                        probabilities = model.predict_proba(X_scaled)[:, 1]

                        data["Prediction"] = predictions
                        data["Churn_Probability"] = probabilities
                    except Exception as e:
                        st.error(
                            f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –¥–∞–Ω–∏—Ö –∞–±–æ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—ñ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å —Å—Ç–æ–≤–ø—Ü—ñ–≤: {e}"
                        )
                        return
                    # ============================================

                data["Churn_Status"] = data["Prediction"].apply(
                    lambda x: "–í—ñ–¥—Ç—ñ–∫" if x == 1 else "–ó–∞–ª–∏—à–∏—Ç—å—Å—è"
                )

                st.subheader("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ü–∞–∫–µ—Ç–Ω–æ–≥–æ –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è:")
                st.dataframe(data)

                # –ù–∞–¥–∞—î–º–æ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                csv_output = data.to_csv(index=False).encode("utf-8")
                st.download_button(
                    label="üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ (CSV)",
                    data=csv_output,
                    file_name="churn_predictions.csv",
                    mime="text/csv",
                )

                # –ö–æ—Ä–æ—Ç–∫–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞
                churn_counts = data["Churn_Status"].value_counts()
                st.markdown(f"**–í—Å—å–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤:** {len(data)}")
                st.markdown(
                    f"**–ü—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω–∏–π –í—ñ–¥—Ç—ñ–∫:** {churn_counts.get('–í—ñ–¥—Ç—ñ–∫', 0)}"
                )
                st.markdown(
                    f"**–ü—Ä–æ–≥–Ω–æ–∑–æ–≤–∞–Ω–æ –ó–∞–ª–∏—à–∞—Ç—å—Å—è:** {churn_counts.get('–ó–∞–ª–∏—à–∏—Ç—å—Å—è', 0)}"
                )

        except Exception as e:
            st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ —Ñ–∞–π–ª—É: {e}")


def analytics_page():
    """
    –†–µ–∞–ª—ñ–∑—É—î —Å—Ç–æ—Ä—ñ–Ω–∫—É –∑ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—î—é –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ —Ä–æ–±–æ—Ç–∏ –º–æ–¥–µ–ª—ñ.
    !!! –ó–ê–ì–õ–£–®–ö–ê: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è —ñ–º—ñ—Ç–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ. !!!
    """
    st.header("üìà –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ —Ç–∞ –û—Ü—ñ–Ω–∫–∞ –†–æ–±–æ—Ç–∏ –ú–æ–¥–µ–ª—ñ")
    st.info(
        "–¶–µ–π —Ä–æ–∑–¥—ñ–ª –¥–µ–º–æ–Ω—Å—Ç—Ä—É—î **–Ü–ú–Ü–¢–û–í–ê–ù–Ü** –º–µ—Ç—Ä–∏–∫–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–º—ñ–Ω—ñ—Ç—å —ó—Ö –Ω–∞ —Ä–µ–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ –∑ –≤–∞—à–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä—É."
    )
    st.divider()

    st.subheader("–ö–ª—é—á–æ–≤—ñ –ú–µ—Ç—Ä–∏–∫–∏ –û—Ü—ñ–Ω–∫–∏")
    metrics_data = {
        "–ú–µ—Ç—Ä–∏–∫–∞": [
            "Accuracy",
            "Precision (–í—ñ–¥—Ç—ñ–∫)",
            "Recall (–í—ñ–¥—Ç—ñ–∫)",
            "F1-Score (–í—ñ–¥—Ç—ñ–∫)",
            "AUC-ROC",
        ],
        "–ó–Ω–∞—á–µ–Ω–Ω—è": ["0.85", "0.78", "0.75", "0.76", "0.92"],
    }
    st.dataframe(pd.DataFrame(metrics_data).set_index("–ú–µ—Ç—Ä–∏–∫–∞"))

    st.markdown(
        """
    ---
    **–ü–æ—è—Å–Ω–µ–Ω–Ω—è:**
    - **Accuracy (–¢–æ—á–Ω—ñ—Å—Ç—å)**: –ó–∞–≥–∞–ª—å–Ω–∞ —á–∞—Å—Ç–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö –ø—Ä–æ–≥–Ω–æ–∑—ñ–≤.
    - **Precision (–¢–æ—á–Ω—ñ—Å—Ç—å)**: –ó —É—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤, —è–∫–∏—Ö –º–∏ –ø–µ—Ä–µ–¥–±–∞—á–∏–ª–∏ —è–∫ '–í—ñ–¥—Ç—ñ–∫', —Å–∫—ñ–ª—å–∫–∏ —Å–ø—Ä–∞–≤–¥—ñ –ø—ñ—à–ª–æ.
    - **Recall (–ü–æ–≤–Ω–æ—Ç–∞)**: –ó —É—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤, —è–∫—ñ —Å–ø—Ä–∞–≤–¥—ñ –ø—ñ—à–ª–∏, —Å–∫—ñ–ª—å–∫–∏ –º–∏ –∑–º–æ–≥–ª–∏ –≤–∏–∑–Ω–∞—á–∏—Ç–∏.
    - **AUC-ROC**: –ú—ñ—Ä–∞ —Ä–æ–∑–¥—ñ–ª—å–Ω–æ—ó –∑–¥–∞—Ç–Ω–æ—Å—Ç—ñ –º–æ–¥–µ–ª—ñ. –ó–Ω–∞—á–µ–Ω–Ω—è –ø–æ–Ω–∞–¥ 0.9 –≤–≤–∞–∂–∞—î—Ç—å—Å—è –≤—ñ–¥–º—ñ–Ω–Ω–∏–º.
    """
    )

    st.subheader("–í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó –†–æ–±–æ—Ç–∏ –ú–æ–¥–µ–ª—ñ")

    # –ü—Ä–∏–∫–ª–∞–¥ –¥–ª—è —ñ–º—ñ—Ç–∞—Ü—ñ—ó –ú–∞—Ç—Ä–∏—Ü—ñ –ü–ª—É—Ç–∞–Ω–∏–Ω–∏
    st.text("–ú–∞—Ç—Ä–∏—Ü—è –ü–ª—É—Ç–∞–Ω–∏–Ω–∏ (–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö):")
    fig_cm, ax_cm = plt.subplots(figsize=(6, 5))
    # –Ü–º—ñ—Ç–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö –ú–∞—Ç—Ä–∏—Ü—ñ –ü–ª—É—Ç–∞–Ω–∏–Ω–∏
    cm = np.array([[850, 50], [100, 250]])
    ax_cm.matshow(cm, cmap=plt.cm.Blues, alpha=0.7)
    for i in range(cm.shape[0]):
        for j in range(cm.shape[1]):
            ax_cm.text(x=j, y=i, s=cm[i, j], va="center", ha="center", fontsize=18)
    ax_cm.set_xticks([0, 1])
    ax_cm.set_yticks([0, 1])
    ax_cm.set_xticklabels(["–ó–∞–ª–∏—à–∏—Ç—å—Å—è (–ü—Ä–æ–≥–Ω–æ–∑)", "–í—ñ–¥—Ç—ñ–∫ (–ü—Ä–æ–≥–Ω–æ–∑)"])
    ax_cm.set_yticklabels(["–ó–∞–ª–∏—à–∏—Ç—å—Å—è (–§–∞–∫—Ç)", "–í—ñ–¥—Ç—ñ–∫ (–§–∞–∫—Ç)"])
    ax_cm.set_title("–ú–∞—Ç—Ä–∏—Ü—è –ü–ª—É—Ç–∞–Ω–∏–Ω–∏ (–Ü–º—ñ—Ç–∞—Ü—ñ—è)")
    st.pyplot(fig_cm)


# ==============================================================================
# –û–°–ù–û–í–ù–ê –°–¢–†–£–ö–¢–£–†–ê STREAMLIT
# ==============================================================================

# –ë–æ–∫–æ–≤–∞ –ø–∞–Ω–µ–ª—å
st.sidebar.title("üõ† –ù–∞–≤—ñ–≥–∞—Ü—ñ—è –ü—Ä–æ—î–∫—Ç–æ–º")

# ============ –ó–ê–ì–õ–£–®–ö–ê –î–õ–Ø –õ–û–ì–û–¢–ò–ü–£ (–ë–û–ö–û–í–ê –ü–ê–ù–ï–õ–¨) ============
try:
    # –®–ª—è—Ö –¥–æ –ª–æ–≥–æ—Ç–∏–ø—É
    st.sidebar.image(
        "app/assets/logo.png", use_column_width=True, caption="–ü—Ä–æ–≥–Ω–æ–∑ –í—ñ–¥—Ç–æ–∫—É"
    )
except:
    st.sidebar.markdown("### üìä –ü—Ä–æ–≥–Ω–æ–∑ –í—ñ–¥—Ç–æ–∫—É")
    st.sidebar.caption("*(üí° –ú—ñ—Å—Ü–µ –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø—É)*")
# ===============================================================

menu_options = {
    "–†—É—á–Ω–∏–π –í–≤—ñ–¥": "single_predict",
    "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –§–∞–π–ª—É": "batch_predict",
    "–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –ú–æ–¥–µ–ª—ñ": "model_analytics",
}

# –ú–µ–Ω—é –≤–∏–±–æ—Ä—É –≤–∫–ª–∞–¥–∫–∏
selection = st.sidebar.radio("–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª:", list(menu_options.keys()))

st.sidebar.divider()
st.sidebar.caption("–ü—Ä–æ—î–∫—Ç Python DS & ML –ö—É—Ä—Å—É")

# –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –æ–±—Ä–∞–Ω–æ—ó –≤–∫–ª–∞–¥–∫–∏
if selection == "–†—É—á–Ω–∏–π –í–≤—ñ–¥":
    manual_input_page(model, scaler)
elif selection == "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –§–∞–π–ª—É":
    file_upload_page(model, scaler)
elif selection == "–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –ú–æ–¥–µ–ª—ñ":
    analytics_page()

st.caption("¬© 2025 –ê–Ω–∞–ª—ñ—Ç–∏—á–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –∑ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –≤—ñ–¥—Ç–æ–∫—É –∫–ª—ñ—î–Ω—Ç—ñ–≤ üì°")
