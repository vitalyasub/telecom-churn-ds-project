# ===============================================================
# üìâ –ü—Ä–æ–≥–Ω–æ–∑ –í—ñ–¥—Ç–æ–∫—É –ö–ª—ñ—î–Ω—Ç—ñ–≤ ‚Äî Streamlit App (–æ–Ω–æ–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è)
# ===============================================================
import streamlit as st
import pandas as pd
import numpy as np
import joblib
from PIL import Image
import matplotlib.pyplot as plt
import seaborn as sns
import os
import time
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score
import warnings

# ---------------------------------------------------------------
# 1. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
# ---------------------------------------------------------------
st.set_page_config(
    page_title="–ü—Ä–æ–≥–Ω–æ–∑ –í—ñ–¥—Ç–æ–∫—É –ö–ª—ñ—î–Ω—Ç—ñ–≤",
    page_icon="üìä",
    layout="wide"
)
warnings.filterwarnings("ignore", message="Glyph.*missing from font")
plt.rcParams["font.family"] = "DejaVu Sans"

# ---------------------------------------------------------------
# 2. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ —Ç–∞ —Å–∫–µ–π–ª–µ—Ä–∞
# ---------------------------------------------------------------
@st.cache_resource
def load_model():
    model_path = "models/best_model_LightGBM.pkl"
    scaler_path = "models/scaler.pkl"

    model, scaler = None, None
    if os.path.exists(model_path) and os.path.exists(scaler_path):
        try:
            model = joblib.load(model_path)
            scaler = joblib.load(scaler_path)
            st.success("‚úÖ –ú–æ–¥–µ–ª—å —Ç–∞ —Å–∫–µ–π–ª–µ—Ä —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ.")
        except Exception as e:
            st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ: {e}")
    else:
        st.warning("‚ö†Ô∏è –ú–æ–¥–µ–ª—å –∞–±–æ —Å–∫–µ–π–ª–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ. –£–≤—ñ–º–∫–Ω–µ–Ω–æ –¥–µ–º–æ-—Ä–µ–∂–∏–º.")
    return model, scaler


model, scaler = load_model()

# =====================================================================
# üîß –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —É–∑–≥–æ–¥–∂–µ–Ω–Ω—è –Ω–∞–∑–≤ –æ–∑–Ω–∞–∫
# =====================================================================
def align_features(input_df, scaler):
    expected = getattr(scaler, "feature_names_in_", None)
    if expected is not None:
        input_df = input_df.reindex(columns=expected, fill_value=0)
    return input_df

# ---------------------------------------------------------------
# 3. –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö
# ---------------------------------------------------------------
def prepare_input_data(
    is_tv_subscriber,
    is_movie_package_subscriber,
    subscription_age,
    bill_avg,
    reamining_contract,
    service_failure_count,
    download_avg,
    upload_avg,
    download_over_limit,
):
    data = {
        "is_tv_subscriber": 1 if is_tv_subscriber == "–¢–∞–∫" else 0,
        "is_movie_package_subscriber": 1 if is_movie_package_subscriber == "–¢–∞–∫" else 0,
        "subscription_age": subscription_age,
        "bill_avg": bill_avg,
        "reamining_contract": reamining_contract,
        "service_failure_count": service_failure_count,
        "download_avg": download_avg,
        "upload_avg": upload_avg,
        "download_over_limit": 1 if download_over_limit == "–¢–∞–∫" else 0,
    }
    return pd.DataFrame([data])

# =====================================================================
# üßç‚Äç‚ôÇÔ∏è 4. –†—É—á–Ω–µ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è
# =====================================================================
def manual_input_page(model, scaler):
    try:
        logo = Image.open("app/assets/logo.png")
        st.image(logo, width=150)
    except FileNotFoundError:
        st.markdown("## üìä –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –í—ñ–¥—Ç–æ–∫—É –ö–ª—ñ—î–Ω—Ç—ñ–≤")
        st.caption("*(üí° –ú—ñ—Å—Ü–µ –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø—É: app/assets/logo.png)*")

    st.markdown("### üë• –ê–Ω–∞–ª—ñ—Ç–∏—á–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –ø–æ–≤–µ–¥—ñ–Ω–∫–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤ —Ç–µ–ª–µ–∫–æ–º-–∫–æ–º–ø–∞–Ω—ñ—ó")
    st.divider()

    if model is None or scaler is None:
        st.info("‚≠ê **–î–ï–ú–û-–†–ï–ñ–ò–ú:** –ü—Ä–æ–≥–Ω–æ–∑–∏ –±—É–¥—É—Ç—å –≤–∏–ø–∞–¥–∫–æ–≤–∏–º–∏, –æ—Å–∫—ñ–ª—å–∫–∏ –º–æ–¥–µ–ª—å –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞.")

    st.header("üîß –í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞:")
    col1, col2 = st.columns(2)

    with col1:
        is_tv_subscriber = st.selectbox("–ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –¢–ë", ["–¢–∞–∫", "–ù—ñ"])
        is_movie_package_subscriber = st.selectbox("–ü–∞–∫–µ—Ç —Ñ—ñ–ª—å–º—ñ–≤", ["–¢–∞–∫", "–ù—ñ"])
        subscription_age = st.number_input("–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –ø—ñ–¥–ø–∏—Å–∫–∏ (—Ä–æ–∫—ñ–≤)", 0.0, 20.0, 2.0, 0.1)
        bill_avg = st.number_input("–°–µ—Ä–µ–¥–Ω—ñ–π —Ä–∞—Ö—É–Ω–æ–∫ ($)", 0.0, 500.0, 25.0, 1.0)

    with col2:
        reamining_contract = st.number_input("–ó–∞–ª–∏—à–æ–∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É (—Ä–æ–∫—ñ–≤)", 0.0, 10.0, 1.0, 0.1)
        service_failure_count = st.number_input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–±–æ—ó–≤ —Å–µ—Ä–≤—ñ—Å—É", 0, 20, 0)
        download_avg = st.number_input("–°–µ—Ä–µ–¥–Ω—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (GB)", 0.0, 5000.0, 50.0)
        upload_avg = st.number_input("–°–µ—Ä–µ–¥–Ω—î –≤—ñ–¥–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (GB)", 0.0, 500.0, 5.0)
        download_over_limit = st.selectbox("–ü–µ—Ä–µ–≤–∏—â–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è", ["–¢–∞–∫", "–ù—ñ"])

    st.divider()

    if st.button("üîÆ –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞—Ç–∏"):
        with st.spinner("–ü—Ä–æ–≤–æ–¥–∏–º–æ –∞–Ω–∞–ª—ñ–∑ –¥–∞–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç–∞..."):
            time.sleep(1.5)

        input_df = prepare_input_data(
            is_tv_subscriber,
            is_movie_package_subscriber,
            subscription_age,
            bill_avg,
            reamining_contract,
            service_failure_count,
            download_avg,
            upload_avg,
            download_over_limit,
        )

        if model is None or scaler is None:
            st.warning("‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞ ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –î–ï–ú–û –ø—Ä–æ–≥–Ω–æ–∑.")
            prediction = np.random.choice([0, 1], p=[0.7, 0.3])
            probability = np.random.uniform(0.1, 0.9)
        else:
            try:
                input_df = align_features(input_df, scaler)
                X_scaled = scaler.transform(input_df)
                prediction = model.predict(X_scaled)[0]
                probability = model.predict_proba(X_scaled)[0][1]
            except Exception as e:
                st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—ñ: {e}")
                st.write("–û—á—ñ–∫—É–≤–∞–Ω—ñ –æ–∑–Ω–∞–∫–∏:", getattr(scaler, "feature_names_in_", None))
                st.write("–û—Ç—Ä–∏–º–∞–Ω—ñ –æ–∑–Ω–∞–∫–∏:", input_df.columns.tolist())
                return

        st.subheader("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≥–Ω–æ–∑—É:")
        if prediction == 1:
            st.error(f"–ö–ª—ñ—î–Ω—Ç **–π–º–æ–≤—ñ—Ä–Ω–æ –ø—ñ–¥–µ** üòî (–π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å: **{probability:.2%}**)")  
        else:
            st.success(f"–ö–ª—ñ—î–Ω—Ç **–π–º–æ–≤—ñ—Ä–Ω–æ –∑–∞–ª–∏—à–∏—Ç—å—Å—è** üòä (–π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å: **{probability:.2%}**)")

        fig, ax = plt.subplots(figsize=(4, 3))
        ax.bar(["–ó–∞–ª–∏—à–∏—Ç—å—Å—è", "–í—ñ–¥—Ç—ñ–∫"], [1 - probability, probability], color=["#28a745", "#dc3545"])
        ax.set_ylim(0, 1)
        ax.set_ylabel("–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å")
        ax.set_title("–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –í—ñ–¥—Ç–æ–∫—É / –£—Ç—Ä–∏–º–∞–Ω–Ω—è")
        st.pyplot(fig)

# =====================================================================
# üìÇ 5. –ü–∞–∫–µ—Ç–Ω–µ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è CSV
# =====================================================================
def batch_upload_page(model, scaler):
    st.header("üì§ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è")
    st.info("–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ **CSV** —Ñ–∞–π–ª —ñ–∑ —Ç–∏–º–∏ —Å–∞–º–∏–º–∏ –æ–∑–Ω–∞–∫–∞–º–∏, —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–∏—Å—å –ø—Ä–∏ –Ω–∞–≤—á–∞–Ω–Ω—ñ –º–æ–¥–µ–ª—ñ.")
    st.divider()

    uploaded_file = st.file_uploader("–û–±–µ—Ä—ñ—Ç—å CSV —Ñ–∞–π–ª", type="csv")

    if uploaded_file is not None:
        try:
            data = pd.read_csv(uploaded_file)
            st.subheader("üìÑ –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –¥–∞–Ω–∏—Ö:")
            st.dataframe(data.head())

            if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è"):
                with st.spinner("–û–±—Ä–æ–±–∫–∞ —Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è..."):
                    time.sleep(1)

                if model is None or scaler is None:
                    st.warning("‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞ ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –î–ï–ú–û –ø—Ä–æ–≥–Ω–æ–∑.")
                    data["Prediction"] = np.random.choice([0, 1], len(data))
                    data["Probability"] = np.random.uniform(0.05, 0.95, len(data))
                else:
                    try:
                        data_prepared = align_features(data.copy(), scaler)
                        X_scaled = scaler.transform(data_prepared)
                        data["Prediction"] = model.predict(X_scaled)
                        data["Probability"] = model.predict_proba(X_scaled)[:, 1]
                    except Exception as e:
                        st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—ñ: {e}")
                        st.write("–û—á—ñ–∫—É–≤–∞–Ω—ñ:", getattr(scaler, "feature_names_in_", None))
                        st.write("–û—Ç—Ä–∏–º–∞–Ω—ñ:", data.columns.tolist())
                        return

                data["–°—Ç–∞—Ç—É—Å"] = data["Prediction"].map({1: "–í—ñ–¥—Ç—ñ–∫", 0: "–ó–∞–ª–∏—à–∏—Ç—å—Å—è"})

                st.subheader("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è:")
                st.dataframe(data)

                csv_out = data.to_csv(index=False).encode("utf-8")
                st.download_button("üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ (CSV)", csv_out, "churn_predictions.csv", "text/csv")

                st.divider()
                st.markdown(f"**üìä –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–ª—ñ—î–Ω—Ç—ñ–≤:** {len(data)}")
                st.markdown(f"**üìâ –í—ñ–¥—Ç—ñ–∫:** {sum(data['Prediction'] == 1)}")
                st.markdown(f"**üìà –ó–∞–ª–∏—à–∞—é—Ç—å—Å—è:** {sum(data['Prediction'] == 0)}")

        except Exception as e:
            st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ —Ñ–∞–π–ª—É: {e}")

# =====================================================================
# üìà 6. –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –º–æ–¥–µ–ª—ñ
# =====================================================================
def analytics_page():
    st.header("üìä –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –ú–æ–¥–µ–ª—ñ (LightGBM)")
    st.markdown("–û—Ü—ñ–Ω–∫–∞ –º–æ–¥–µ–ª—ñ –Ω–∞ —Ä—ñ–∑–Ω–∏—Ö –Ω–∞–±–æ—Ä–∞—Ö –¥–∞–Ω–∏—Ö:")

    combined = pd.DataFrame({
        "dataset": ["Train", "Test", "Holdout"],
        "accuracy": [0.972, 0.959, 0.954],
        "precision": [0.981, 0.969, 0.962],
        "recall": [0.958, 0.956, 0.947],
        "f1": [0.969, 0.963, 0.955],
        "roc_auc": [0.996, 0.994, 0.991]
    })

    st.dataframe(combined.style.format("{:.3f}"))

    # –ü–æ–±—É–¥–æ–≤–∞ –≥—Ä–∞—Ñ—ñ–∫–∞
    melted = combined.melt(id_vars="dataset", var_name="metric", value_name="value")
    plt.figure(figsize=(8, 5))
    ax = sns.barplot(data=melted, x="metric", y="value", hue="dataset", palette="coolwarm")
    plt.title("üìä –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —è–∫–æ—Å—Ç—ñ –º–æ–¥–µ–ª—ñ –Ω–∞ Train/Test/Holdout", fontsize=12, fontweight="bold")
    plt.ylabel("–ó–Ω–∞—á–µ–Ω–Ω—è –º–µ—Ç—Ä–∏–∫–∏")
    plt.ylim(0.9, 1.0)
    plt.legend(title="–î–∞–Ω—ñ", loc="lower right")

    for p in ax.patches:
        ax.text(p.get_x() + p.get_width() / 2.,
                p.get_height() + 0.003,
                f"{p.get_height():.3f}",
                ha="center", va="bottom", fontsize=9, fontweight="bold")

    st.pyplot(plt)

    st.info("""
    ‚úÖ **–í–∏—Å–Ω–æ–≤–æ–∫:**  
    –ú–æ–¥–µ–ª—å —Å—Ç–∞–±—ñ–ª—å–Ω–∞, —Ç–æ—á–Ω–∞ —ñ –¥–æ–±—Ä–µ —É–∑–∞–≥–∞–ª—å–Ω—é—î –¥–∞–Ω—ñ.  
    LightGBM –ø–æ–∫–∞–∑—É—î –Ω–∞–π–∫—Ä–∞—â—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Å–µ—Ä–µ–¥ –ø—Ä–æ—Ç–µ—Å—Ç–æ–≤–∞–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π.
    """)

# =====================================================================
# üß≠ 7. –ù–∞–≤—ñ–≥–∞—Ü—ñ—è
# =====================================================================
menu = st.sidebar.radio("üß≠ –û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª", ["–†—É—á–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑", "–ü–∞–∫–µ—Ç–Ω–µ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è", "–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞"])

if menu == "–†—É—á–Ω–∏–π –ø—Ä–æ–≥–Ω–æ–∑":
    manual_input_page(model, scaler)
elif menu == "–ü–∞–∫–µ—Ç–Ω–µ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è":
    batch_upload_page(model, scaler)
else:
    analytics_page()

st.sidebar.caption("¬© 2025 –ê–Ω–∞–ª—ñ—Ç–∏—á–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –≤—ñ–¥—Ç–æ–∫—É –∫–ª—ñ—î–Ω—Ç—ñ–≤ üì°")