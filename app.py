# ===============================================================
# üìâ –ü—Ä–æ–≥–Ω–æ–∑ –í—ñ–¥—Ç–æ–∫—É –ö–ª—ñ—î–Ω—Ç—ñ–≤ ‚Äî Streamlit App (–û–°–¢–ê–¢–û–ß–ù–ê –í–ï–†–°–Ü–Ø)
# ===============================================================
import streamlit as st
import pandas as pd
import numpy as np
import joblib
import matplotlib.pyplot as plt
import seaborn as sns
import os
import time
import warnings
from typing import Tuple, Any

# ---------------------------------------------------------------
# 1. –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
# ---------------------------------------------------------------
st.set_page_config(page_title="–ü—Ä–æ–≥–Ω–æ–∑ –í—ñ–¥—Ç–æ–∫—É –ö–ª—ñ—î–Ω—Ç—ñ–≤", page_icon="üìä", layout="wide")
warnings.filterwarnings("ignore", message="Glyph.*missing from font")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–∏–ª—é –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫—ñ–≤
plt.rcParams["font.family"] = "DejaVu Sans"
plt.style.use("ggplot")

# ---------------------------------------------------------------
# üé® –ö–∞—Å—Ç–æ–º–Ω—ñ –°—Ç–∏–ª—ñ CSS
# ---------------------------------------------------------------
st.markdown(
    """
<style>
    /* –û—Å–Ω–æ–≤–Ω–∞ –ø–∞–ª—ñ—Ç—Ä–∞ –∫–æ–ª—å–æ—Ä—ñ–≤ */
    :root {
        --primary-dark: #324851;
        --primary-green: #86AC41;
        --secondary-teal: #34675C;
        --accent-light: #7DA3A1;
    }

    /* –ó–∞–≥–∞–ª—å–Ω—ñ —Å—Ç–∏–ª—ñ */
    # .stApp {
    #     background: linear-gradient(135deg, #f5f7fa 0%, #e8f0f2 100%);
    # }

    /* –ó–∞–≥–æ–ª–æ–≤–∫–∏ */
    h1, h2, h3 {
        color: #324851 !important;
        font-weight: 700 !important;
    }

    /* –ë–æ–∫–æ–≤–∞ –ø–∞–Ω–µ–ª—å */
    [data-testid="stSidebar"] {
        background: linear-gradient(180deg, #324851 0%, #34675C 100%);
    }

    [data-testid="stSidebar"] * {
        color: #324851 !important;
    }

    /* –ö–Ω–æ–ø–∫–∏ */
    .stButton{
    display: flex !important;
        justify-content: center !important;
        margin: 2rem auto !important;
    }

    .stButton > button {
        background: linear-gradient(135deg, #86AC41 0%, #34675C 100%);
        color: white;
        border: none;
        border-radius: 8px;
        padding: 0.6rem 1.2rem;
        font-weight: 600;
        font-size: 16px;
        transition: all 0.3s ease;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        width: 33% !important;
    }

    .stButton > button:hover {
        background: linear-gradient(135deg, #34675C 0%, #86AC41 100%);
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
        transform: translateY(-2px);
    }

    .stButton > button:active {
        transform: translateY(0px);
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .stButton > button:focus {
        box-shadow: 0 0 0 3px rgba(134, 172, 65, 0.3);
        outline: none;
    }

    /* –ú–µ—Ç—Ä–∏–∫–∏ */
    [data-testid="stMetricValue"] {
        color: #324851;
        font-size: 2rem !important;
        font-weight: 700 !important;
    }

    [data-testid="stMetricLabel"] {
        color: #34675C;
        font-weight: 600 !important;
    }

    /* –ö–∞—Ä—Ç–∫–∏ —Ç–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ */
    .element-container {
        background: white;
        border-radius: 10px;
        padding: 1rem;
        margin: 0.5rem 0;
        #box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        #width: 500px !important;
    }

    /* –Ü–Ω—Ñ–æ –±–ª–æ–∫–∏ */
    .stAlert {
        border-radius: 8px;
        border-left: 4px solid #86AC41;
        background-color: rgba(134, 172, 65, 0.1);
    }

    /* –°–µ–ª–µ–∫—Ç–±–æ–∫—Å–∏ —Ç–∞ —ñ–Ω–ø—É—Ç–∏ */


    /* –¢–∞–±–ª–∏—Ü—ñ */
    .dataframe {
        border-radius: 8px;
        overflow: hidden;
    }

    /* Success/Error –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è */
    .stSuccess {
        background-color: rgba(134, 172, 65, 0.15);
        color: #34675C;
        border-radius: 8px;
        padding: 1rem;
    }

    .stError {
        background-color: rgba(220, 53, 69, 0.15);
        border-radius: 8px;
        padding: 1rem;
    }

    /* Download button */
    .stDownloadButton > button {
        background: linear-gradient(135deg, #7DA3A1 0%, #34675C 100%);
        color: white;
        border: none;
        border-radius: 8px;
        padding: 0.6rem 1.2rem;
        font-weight: 600;
        transition: all 0.3s ease;
    }

    .stDownloadButton > button:hover {
        background: linear-gradient(135deg, #34675C 0%, #7DA3A1 100%);
        transform: translateY(-2px);
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
    }

    /* –†–∞–¥—ñ–æ –∫–Ω–æ–ø–∫–∏ –≤ —Å–∞–π–¥–±–∞—Ä—ñ */
    [data-testid="stSidebar"] .stRadio > label {
        background-color: rgba(255, 255, 255, 0.1);
        width: fit-content;
        padding: 0.5rem;
        border-radius: 6px;
        margin: 0.3rem 0;
    }

    [data-testid="stSidebar"] .stRadio > label:hover {
        background-color: rgba(255, 255, 255, 0.2);
        width: fit-content;
    }
</style>
""",
    unsafe_allow_html=True,
)

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –ø–µ—Ä–µ–π–º–µ–Ω—É–≤–∞–Ω–Ω—è –æ–∑–Ω–∞–∫
FEATURE_NAMES_MAP = {
    "reamining_contract": "–ó–∞–ª–∏—à–æ–∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É",
    "subscription_age": "–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –ø—ñ–¥–ø–∏—Å–∫–∏",
    "service_failure_count": "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–±–æ—ó–≤ —Å–µ—Ä–≤—ñ—Å—É",
    "bill_avg": "–°–µ—Ä–µ–¥–Ω—ñ–π —Ä–∞—Ö—É–Ω–æ–∫",
    "download_avg": "–°–µ—Ä–µ–¥–Ω—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è",
    "upload_avg": "–°–µ—Ä–µ–¥–Ω—î —Å–∫–∞—á—É–≤–∞–Ω–Ω—è",
    "is_tv_subscriber": "–ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –¢–ë",
    "is_movie_package_subscriber": "–ü–∞–∫–µ—Ç —Ñ—ñ–ª—å–º—ñ–≤",
    "download_over_limit": "–ü–µ—Ä–µ–≤–∏—â–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è",
}


# ---------------------------------------------------------------
# 2. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ —Ç–∞ —Å–∫–µ–π–ª–µ—Ä–∞
# ---------------------------------------------------------------
@st.cache_resource
def load_model() -> Tuple[Any, Any]:
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –º–æ–¥–µ–ª—å —Ç–∞ —Å–∫–µ–π–ª–µ—Ä –∑ –¥–∏—Å–∫—ñ–≤. –ü–æ–≤–µ—Ä—Ç–∞—î None, —è–∫—â–æ —Ñ–∞–π–ª–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."""
    model_path = "models/best_model_LightGBM.pkl"
    scaler_path = "models/scaler.pkl"

    model, scaler = None, None
    if os.path.exists(model_path) and os.path.exists(scaler_path):
        try:
            model = joblib.load(model_path)
            scaler = joblib.load(scaler_path)
            st.success("‚úÖ –ú–æ–¥–µ–ª—å —Ç–∞ —Å–∫–µ–π–ª–µ—Ä —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ.")
        except Exception as e:
            st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ñ–∞–π–ª—ñ–≤ –º–æ–¥–µ–ª—ñ/—Å–∫–µ–π–ª–µ—Ä–∞: {e}")
    else:
        st.error(
            f"""
        ‚ùå **–ö–†–ò–¢–ò–ß–ù–ê –ü–û–ú–ò–õ–ö–ê:** –ú–æ–¥–µ–ª—å –∞–±–æ —Å–∫–µ–π–ª–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.
        –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Ñ–∞–π–ª–∏ —ñ—Å–Ω—É—é—Ç—å –∑–∞ —à–ª—è—Ö–∞–º–∏:
        - –ú–æ–¥–µ–ª—å: `{model_path}`
        - –°–∫–µ–π–ª–µ—Ä: `{scaler_path}`
        –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –Ω–µ–º–æ–∂–ª–∏–≤–µ.
        """
        )

    return model, scaler


model, scaler = load_model()
MODEL_LOADED = model is not None and scaler is not None


# =====================================================================
# üîß –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
# =====================================================================
def align_features(input_df: pd.DataFrame, scaler: Any) -> pd.DataFrame:
    """–í–∏—Ä—ñ–≤–Ω—é—î —Å—Ç–æ–≤–ø—Ü—ñ –≤—Ö—ñ–¥–Ω–æ–≥–æ DataFrame –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –æ—á—ñ–∫—É–≤–∞–Ω–∏—Ö –º–æ–¥–µ–ª–ª—é."""
    expected = getattr(scaler, "feature_names_in_", None)
    if expected is not None:
        input_df = input_df.reindex(columns=expected, fill_value=0)
    return input_df


def prepare_input_data(
    is_tv_subscriber,
    is_movie_package_subscriber,
    subscription_age,
    bill_avg,
    reamining_contract,
    service_failure_count,
    download_avg,
    upload_avg,
    download_over_limit,
) -> pd.DataFrame:
    data = {
        "is_tv_subscriber": 1 if is_tv_subscriber == "–¢–∞–∫" else 0,
        "is_movie_package_subscriber": 1 if is_movie_package_subscriber == "–¢–∞–∫" else 0,
        "download_over_limit": 1 if download_over_limit == "–¢–∞–∫" else 0,
        "subscription_age": subscription_age,
        "bill_avg": bill_avg,
        "reamining_contract": reamining_contract,
        "service_failure_count": service_failure_count,
        "download_avg": download_avg,
        "upload_avg": upload_avg,
    }
    return pd.DataFrame([data])


# ---------------------------------------------------------------
# 4. –†—É—á–Ω–µ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è (–í–∫–ª–∞–¥–∫–∞ 1)
# ---------------------------------------------------------------
def manual_input_page(model, scaler):
    st.markdown("## üìä –ü—Ä–æ–≥–Ω–æ–∑ –í—ñ–¥—Ç–æ–∫—É –ö–ª—ñ—î–Ω—Ç—ñ–≤: –†—É—á–Ω–∏–π –í–≤—ñ–¥")
    st.caption("–ê–Ω–∞–ª—ñ—Ç–∏—á–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –ø–æ–≤–µ–¥—ñ–Ω–∫–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤ —Ç–µ–ª–µ–∫–æ–º-–∫–æ–º–ø–∞–Ω—ñ—ó.")

    if not MODEL_LOADED:
        st.warning("‚ö†Ô∏è –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞.")
        return

    st.header("üîß –í–≤–µ–¥—ñ—Ç—å –¥–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞:")
    col1, col2 = st.columns(2)

    with col1:
        is_tv_subscriber = st.selectbox("–ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –¢–ë", ["–¢–∞–∫", "–ù—ñ"])
        is_movie_package_subscriber = st.selectbox("–ü–∞–∫–µ—Ç —Ñ—ñ–ª—å–º—ñ–≤", ["–¢–∞–∫", "–ù—ñ"])
        subscription_age = st.number_input(
            "–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –ø—ñ–¥–ø–∏—Å–∫–∏ (—Ä–æ–∫—ñ–≤)", 0.0, 20.0, 2.0, 0.1
        )
        bill_avg = st.number_input("–°–µ—Ä–µ–¥–Ω—ñ–π —Ä–∞—Ö—É–Ω–æ–∫ ($)", 0.0, 500.0, 25.0, 1.0)

    with col2:
        reamining_contract = st.number_input(
            "–ó–∞–ª–∏—à–æ–∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É (—Ä–æ–∫—ñ–≤)", 0.0, 10.0, 1.0, 0.1
        )
        service_failure_count = st.number_input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–±–æ—ó–≤ —Å–µ—Ä–≤—ñ—Å—É", 0, 20, 0)
        download_avg = st.number_input("–°–µ—Ä–µ–¥–Ω—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (GB)", 0.0, 5000.0, 50.0)
        upload_avg = st.number_input("–°–µ—Ä–µ–¥–Ω—î –≤—ñ–¥–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è (GB)", 0.0, 500.0, 5.0)
        download_over_limit = st.selectbox(
            "–ü–µ—Ä–µ–≤–∏—â–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è", ["–¢–∞–∫", "–ù—ñ"]
        )

    if st.button("üîÆ –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞—Ç–∏", use_container_width=True):
        with st.spinner("–ü—Ä–æ–≤–æ–¥–∏–º–æ –∞–Ω–∞–ª—ñ–∑ –¥–∞–Ω–∏—Ö –∫–ª—ñ—î–Ω—Ç–∞..."):
            time.sleep(1.0)

        input_df = prepare_input_data(
            is_tv_subscriber,
            is_movie_package_subscriber,
            subscription_age,
            bill_avg,
            reamining_contract,
            service_failure_count,
            download_avg,
            upload_avg,
            download_over_limit,
        )

        try:
            input_df = align_features(input_df, scaler)
            X_scaled = scaler.transform(input_df)
            prediction = model.predict(X_scaled)[0]
            probability = model.predict_proba(X_scaled)[0][1]
        except Exception as e:
            st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—ñ: {e}")
            return

        st.subheader("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≥–Ω–æ–∑—É:")
        if prediction == 1:
            st.error(
                f"–ö–ª—ñ—î–Ω—Ç **–π–º–æ–≤—ñ—Ä–Ω–æ –ø—ñ–¥–µ** üòî (–π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å: **{probability:.2%}**)"
            )
        else:
            st.success(
                f"–ö–ª—ñ—î–Ω—Ç **–π–º–æ–≤—ñ—Ä–Ω–æ –∑–∞–ª–∏—à–∏—Ç—å—Å—è** üòä (–π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å: **{probability:.2%}**)"
            )

        fig, ax = plt.subplots(figsize=(6, 4))
        probabilities = [1 - probability, probability]
        labels = ["–ó–∞–ª–∏—à–∏—Ç—å—Å—è", "–í—ñ–¥—Ç—ñ–∫"]
        colors = ["#86AC41", "#dc3545"]
        bars = ax.bar(
            labels, probabilities, color=colors, edgecolor="#324851", linewidth=2
        )
        ax.set_ylim(0, 1.1)
        ax.set_ylabel("–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å", fontsize=10, color="#324851", fontweight="bold")
        ax.set_title(
            "–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –í—ñ–¥—Ç–æ–∫—É / –£—Ç—Ä–∏–º–∞–Ω–Ω—è",
            fontsize=12,
            color="#324851",
            fontweight="bold",
            pad=20,
        )
        ax.spines["top"].set_visible(False)
        ax.spines["right"].set_visible(False)
        ax.spines["left"].set_color("#7DA3A1")
        ax.spines["bottom"].set_color("#7DA3A1")
        ax.tick_params(colors="#324851")

        for i, (prob, bar) in enumerate(zip(probabilities, bars)):
            height = bar.get_height()
            ax.text(
                bar.get_x() + bar.get_width() / 2.0,
                height + 0.03,
                f"{prob:.2%}",
                ha="center",
                va="bottom",
                fontweight="bold",
                fontsize=11,
                color="#324851",
            )

        plt.tight_layout()
        st.pyplot(fig)


# ---------------------------------------------------------------
# 5. –ü–∞–∫–µ—Ç–Ω–µ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è CSV (–í–∫–ª–∞–¥–∫–∞ 2)
# ---------------------------------------------------------------
def batch_upload_page(model, scaler):
    st.markdown("## üì§ –ü–∞–∫–µ—Ç–Ω–µ –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è (–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è CSV)")
    st.info(
        "–ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ **CSV** —Ñ–∞–π–ª —ñ–∑ –¥–∞–Ω–∏–º–∏ –∫–ª—ñ—î–Ω—Ç—ñ–≤ (–±–µ–∑ —Ü—ñ–ª—å–æ–≤–æ—ó –∑–º—ñ–Ω–Ω–æ—ó) –¥–ª—è –º–∞—Å–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑—É."
    )

    if not MODEL_LOADED:
        st.warning("‚ö†Ô∏è –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞.")
        return

    uploaded_file = st.file_uploader("–û–±–µ—Ä—ñ—Ç—å CSV —Ñ–∞–π–ª", type="csv")

    if uploaded_file is None:
        st.markdown(
            """
        **‚úÖ –í–∏–º–æ–≥–∏ –¥–æ —Ñ–∞–π–ª—É:** –§–∞–π–ª –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ —Ç–∞–∫—ñ —Å—Ç–æ–≤–ø—Ü—ñ:
        * **`is_tv_subscriber`**: 0 –∞–±–æ 1
        * **`is_movie_package_subscriber`**: 0 –∞–±–æ 1
        * **`subscription_age`**: –†–æ–∫–∏ (0-15)
        * **`bill_avg`**: –°—É–º–∞ (0-1000)
        * **`reamining_contract`**: –†–æ–∫–∏ (0-10)
        * **`service_failure_count`**: –ö—ñ–ª—å–∫—ñ—Å—Ç—å (0-40)
        * **`download_avg`**: –ì–ë (0-8000)
        * **`upload_avg`**: –ì–ë (0-800)
        * **`download_over_limit`**: 0 –∞–±–æ 1
        """
        )

    if uploaded_file is not None:
        try:
            data = pd.read_csv(uploaded_file)
            st.subheader("üìÑ –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –¥–∞–Ω–∏—Ö:")
            st.dataframe(data.head())

            if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è", use_container_width=True):
                with st.spinner("–û–±—Ä–æ–±–∫–∞ —Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è..."):
                    time.sleep(1)

                try:
                    data_prepared = align_features(data.copy(), scaler)
                    required_features = set(getattr(scaler, "feature_names_in_", []))
                    if not required_features.issubset(set(data_prepared.columns)):
                        st.error(
                            f"–í—ñ–¥—Å—É—Ç–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –æ–∑–Ω–∞–∫–∏ —É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ–º—É —Ñ–∞–π–ª—ñ: {required_features - set(data_prepared.columns)}"
                        )
                        return

                    X_scaled = scaler.transform(data_prepared)
                    data["Prediction"] = model.predict(X_scaled)
                    data["Probability"] = model.predict_proba(X_scaled)[:, 1]
                except Exception as e:
                    st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—ñ: {e}")
                    return

                data["–°—Ç–∞—Ç—É—Å"] = data["Prediction"].map({1: "–í—ñ–¥—Ç—ñ–∫", 0: "–ó–∞–ª–∏—à–∏—Ç—å—Å—è"})
                data["–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å"] = data["Probability"].apply(lambda x: f"{x:.2%}")

                st.subheader("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è:")
                st.dataframe(
                    data.drop(columns=["Prediction", "Probability"], errors="ignore")
                )

                col_res1, col_res2, col_res3 = st.columns(3)
                col_res1.metric("üìä –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–ª—ñ—î–Ω—Ç—ñ–≤", len(data))
                col_res2.metric("üìâ –ü—Ä–æ–≥–Ω–æ–∑ –í—ñ–¥—Ç–æ–∫—É", sum(data["Prediction"] == 1))
                col_res3.metric("üìà –ü—Ä–æ–≥–Ω–æ–∑ –£—Ç—Ä–∏–º–∞–Ω–Ω—è", sum(data["Prediction"] == 0))

                csv_out = data.to_csv(index=False).encode("utf-8")
                st.download_button(
                    "üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ (CSV)",
                    csv_out,
                    "churn_predictions.csv",
                    "text/csv",
                )

        except Exception as e:
            st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ –∞–±–æ –æ–±—Ä–æ–±—Ü—ñ —Ñ–∞–π–ª—É: {e}")


# ---------------------------------------------------------------
# 6. –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ (–æ–Ω–æ–≤–ª–µ–Ω–æ: –¥–∏–Ω–∞–º—ñ—á–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏ + feature importance)
# ---------------------------------------------------------------

def data_analysis_page():
    st.markdown("## üîé –û–≥–ª—è–¥ –î–∞–Ω–∏—Ö —Ç–∞ –ö–ª—é—á–æ–≤–∏—Ö –§–∞–∫—Ç–æ—Ä—ñ–≤ –í—ñ–¥—Ç–æ–∫—É")
    st.caption("–ê–Ω–∞–ª—ñ–∑ –≤–ø–ª–∏–≤—É –æ–∑–Ω–∞–∫ –Ω–∞ –π–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å –≤—ñ–¥—Ç–æ–∫—É –∫–ª—ñ—î–Ω—Ç—ñ–≤.")

    st.subheader("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –°—Ç—Ä–∞—Ç–µ–≥—ñ–π –£—Ç—Ä–∏–º–∞–Ω–Ω—è")
    st.warning(
        """
    **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:**
    –°—Ñ–æ–∫—É—Å—É–π—Ç–µ—Å—è –Ω–∞ –∫–ª—ñ—î–Ω—Ç–∞—Ö –∑ –≤–∏—Å–æ–∫–æ—é –≤–∞–∂–ª–∏–≤—ñ—Å—Ç—é –≤—ñ–¥—Ç–æ–∫—É: **–ø—Ä–æ–ø–æ–Ω—É–π—Ç–µ –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É** 
    —Ç–∞ **–º—ñ–Ω—ñ–º—ñ–∑—É–π—Ç–µ –∑–±–æ—ó —Å–µ—Ä–≤—ñ—Å—É** –¥–ª—è —ó—Ö —É—Ç—Ä–∏–º–∞–Ω–Ω—è.
    """
    )

    st.subheader("üîë –ê–Ω–∞–ª—ñ–∑ –§–∞–∫—Ç–æ—Ä—ñ–≤ –í—ñ–¥—Ç–æ–∫—É (Feature Importance)")
    st.markdown("–¶–µ–π –≥—Ä–∞—Ñ—ñ–∫ –ø–æ–∫–∞–∑—É—î —Ä–µ–∞–ª—å–Ω–∏–π –≤–ø–ª–∏–≤ –æ–∑–Ω–∞–∫ –º–æ–¥–µ–ª—ñ LightGBM –Ω–∞ –ø—Ä–æ–≥–Ω–æ–∑ –≤—ñ–¥—Ç–æ–∫—É –∫–ª—ñ—î–Ω—Ç—ñ–≤.")

    # === –î–∏–Ω–∞–º—ñ—á–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤–∞–∂–ª–∏–≤–æ—Å—Ç—ñ –æ–∑–Ω–∞–∫ ===
    if hasattr(model, "feature_importances_"):
        try:
            fi = pd.Series(
                model.feature_importances_,
                index=getattr(scaler, "feature_names_in_", range(len(model.feature_importances_)))
            ).sort_values(ascending=False)

            feature_importance_df = fi.reset_index()
            feature_importance_df.columns = ["–û–∑–Ω–∞–∫–∞", "–í–∞–∂–ª–∏–≤—ñ—Å—Ç—å"]
            feature_importance_df["–û–∑–Ω–∞–∫–∞"] = feature_importance_df["–û–∑–Ω–∞–∫–∞"].replace(FEATURE_NAMES_MAP)
        except Exception as e:
            st.error(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–±—Ä–æ–±–∏—Ç–∏ –≤–∞–∂–ª–∏–≤—ñ—Å—Ç—å –æ–∑–Ω–∞–∫: {e}")
            return
    else:
        st.warning("‚ö†Ô∏è –ú–æ–¥–µ–ª—å –Ω–µ –º–∞—î –∞—Ç—Ä–∏–±—É—Ç—É `feature_importances_`. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω—ñ –¥–∞–Ω—ñ.")
        feature_importance_df = pd.DataFrame({
            "–û–∑–Ω–∞–∫–∞": list(FEATURE_NAMES_MAP.values()),
            "–í–∞–∂–ª–∏–≤—ñ—Å—Ç—å": np.linspace(0.35, 0.01, len(FEATURE_NAMES_MAP))
        })

    # === –ü–æ–±—É–¥–æ–≤–∞ –≥—Ä–∞—Ñ—ñ–∫—É ===
    fig, ax = plt.subplots(figsize=(10, 7))
    bars = ax.barh(
        feature_importance_df["–û–∑–Ω–∞–∫–∞"],
        feature_importance_df["–í–∞–∂–ª–∏–≤—ñ—Å—Ç—å"],
        color="#86AC41",
        edgecolor="#324851",
        linewidth=1.5,
    )
    ax.set_xlabel("–í—ñ–¥–Ω–æ—Å–Ω–∞ –≤–∞–∂–ª–∏–≤—ñ—Å—Ç—å", fontsize=12, color="#324851", fontweight="bold")
    ax.set_ylabel("–û–∑–Ω–∞–∫–∞", fontsize=12, color="#324851", fontweight="bold")
    ax.set_title("–ö–ª—é—á–æ–≤—ñ —Ñ–∞–∫—Ç–æ—Ä–∏, —â–æ –≤–ø–ª–∏–≤–∞—é—Ç—å –Ω–∞ –≤—ñ–¥—Ç—ñ–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤",
                 fontsize=14, color="#324851", fontweight="bold", pad=20)
    ax.invert_yaxis()

    for bar in bars:
        ax.text(bar.get_width() + 0.005, bar.get_y() + bar.get_height()/2,
                f"{bar.get_width():.2f}", va='center', fontsize=10, color="#324851")

    plt.tight_layout()
    st.pyplot(fig)


def model_performance_page():
    st.markdown("## üìà –ê–Ω–∞–ª—ñ–∑ –†–æ–±–æ—Ç–∏ –ú–æ–¥–µ–ª—ñ")
    st.caption("–î–∏–Ω–∞–º—ñ—á–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —ñ–∑ —Ñ–∞–π–ª—É `models/final_evaluation_results.csv`.")

    results_path = "models/final_evaluation_results.csv"
    if os.path.exists(results_path):
        try:
            combined = pd.read_csv(results_path)

            # üß© –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø–µ—Ä–µ–π–º–µ–Ω—É–≤–∞–Ω–Ω—è –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —É–Ω—ñ—Ñ—ñ–∫–∞—Ü—ñ—ó
            combined.columns = [c.strip().capitalize().replace("_", " ") for c in combined.columns]

            # –Ø–∫—â–æ –Ω–µ–º–∞—î –∫–æ–ª–æ–Ω–∫–∏ "–ù–∞–±—ñ—Ä –¥–∞–Ω–∏—Ö", –¥–æ–¥–∞—î–º–æ
            if "–ù–∞–±—ñ—Ä –¥–∞–Ω–∏—Ö" not in combined.columns:
                combined.insert(0, "–ù–∞–±—ñ—Ä –¥–∞–Ω–∏—Ö", ["Holdout"] * len(combined))

            st.success("‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ —Ñ–∞–π–ª—É.")
        except Exception as e:
            st.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ —Ñ–∞–π–ª—É –∑ –º–µ—Ç—Ä–∏–∫–∞–º–∏: {e}")
            return
    else:
        st.warning("‚ö†Ô∏è –§–∞–π–ª –º–µ—Ç—Ä–∏–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω—ñ –¥–∞–Ω—ñ.")
        combined = pd.DataFrame({
            "–ù–∞–±—ñ—Ä –¥–∞–Ω–∏—Ö": ["Train", "Test", "Holdout"],
            "Accuracy": [0.972, 0.959, 0.954],
            "Precision": [0.981, 0.969, 0.962],
            "Recall": [0.958, 0.956, 0.947],
            "F1-score": [0.969, 0.963, 0.955],
            "Roc auc": [0.996, 0.994, 0.991],
        })

    st.dataframe(combined, hide_index=True)

    # --- –í–∏–±—ñ—Ä –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó ---
    metric_options = [c for c in combined.columns if c not in ["–ù–∞–±—ñ—Ä –¥–∞–Ω–∏—Ö"]]
    selected_metric = st.selectbox("–û–±–µ—Ä—ñ—Ç—å –º–µ—Ç—Ä–∏–∫—É –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è", metric_options)

    if selected_metric not in combined.columns:
        st.error(f"–ú–µ—Ç—Ä–∏–∫–∞ {selected_metric} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ —É –¥–∞–Ω–∏—Ö.")
        return

    # --- –ü–æ–±—É–¥–æ–≤–∞ –≥—Ä–∞—Ñ—ñ–∫–∞ ---
    fig, ax = plt.subplots(figsize=(9, 6))
    colors_bar = ["#86AC41", "#7DA3A1", "#34675C"]
    bars = ax.bar(
        combined["–ù–∞–±—ñ—Ä –¥–∞–Ω–∏—Ö"],
        combined[selected_metric],
        color=colors_bar[: len(combined)],
        edgecolor="#324851",
        linewidth=2,
    )
    ax.set_ylabel("–ó–Ω–∞—á–µ–Ω–Ω—è –º–µ—Ç—Ä–∏–∫–∏", fontsize=12, color="#324851", fontweight="bold")
    ax.set_xlabel("–ù–∞–±—ñ—Ä –¥–∞–Ω–∏—Ö", fontsize=12, color="#324851", fontweight="bold")
    ax.set_title(
        f"üìä –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è **{selected_metric}** –º—ñ–∂ –Ω–∞–±–æ—Ä–∞–º–∏ –¥–∞–Ω–∏—Ö",
        fontsize=14,
        color="#324851",
        fontweight="bold",
        pad=20,
    )
    ax.set_ylim(0.8, 1.02)

    for bar in bars:
        height = bar.get_height()
        ax.text(
            bar.get_x() + bar.get_width() / 2.0,
            height + 0.01,
            f"{height:.3f}",
            ha="center",
            va="bottom",
            fontsize=11,
            fontweight="bold",
            color="#324851",
        )

    plt.tight_layout()
    st.pyplot(fig)

    st.info(
        f"""
    ‚úÖ **–í–∏—Å–Ω–æ–≤–æ–∫:** –ú–æ–¥–µ–ª—å –¥–µ–º–æ–Ω—Å—Ç—Ä—É—î —Å—Ç–∞–±—ñ–ª—å–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∑–∞ –º–µ—Ç—Ä–∏–∫–æ—é **{selected_metric}**, 
    —â–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î —ó—ó —É–∑–∞–≥–∞–ª—å–Ω—é—é—á—É –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å.
    """
    )


# =====================================================================
# 7. –û—Å–Ω–æ–≤–Ω–∞ –ù–∞–≤—ñ–≥–∞—Ü—ñ—è
# =====================================================================
if __name__ == "__main__":
    st.sidebar.title("üß≠ –ú–µ–Ω—é")
    main_menu = st.sidebar.radio(
        "–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª",
        ["–†—É—á–Ω–∏–π –≤–≤—ñ–¥", "–ü–∞–∫–µ—Ç–Ω–∏–π –≤–≤—ñ–¥", "–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ —Ç–∞ –ó–≤—ñ—Ç–∏"],
        index=0,
    )

    if main_menu == "–†—É—á–Ω–∏–π –≤–≤—ñ–¥":
        manual_input_page(model, scaler)
    elif main_menu == "–ü–∞–∫–µ—Ç–Ω–∏–π –≤–≤—ñ–¥":
        batch_upload_page(model, scaler)
    else:
        st.markdown("## üìà –ê–Ω–∞–ª—ñ—Ç–∏—á–Ω–∏–π –ü–æ—Ä—Ç–∞–ª")
        st.caption("–í–∏–±–µ—Ä—ñ—Ç—å –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏.")

        analytic_tab = st.selectbox(
            "–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏",
            ["–û–≥–ª—è–¥ –î–∞–Ω–∏—Ö —Ç–∞ –§–∞–∫—Ç–æ—Ä—ñ–≤ –í—ñ–¥—Ç–æ–∫—É", "–û—Ü—ñ–Ω–∫–∞ –ú–æ–¥–µ–ª—ñ"],
        )

        if analytic_tab == "–û–≥–ª—è–¥ –î–∞–Ω–∏—Ö —Ç–∞ –§–∞–∫—Ç–æ—Ä—ñ–≤ –í—ñ–¥—Ç–æ–∫—É":
            data_analysis_page()
        elif analytic_tab == "–û—Ü—ñ–Ω–∫–∞ –ú–æ–¥–µ–ª—ñ":
            model_performance_page()

    st.sidebar.caption("¬© 2025 –ê–Ω–∞–ª—ñ—Ç–∏—á–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è –≤—ñ–¥—Ç–æ–∫—É –∫–ª—ñ—î–Ω—Ç—ñ–≤ üì°")